	.ASECT
	.RADIX	16
	.TITLE	PINBL4
	.LIST	MEB
	.SBTTL****************************
	.SBTTL*
	.SBTTL*PROGRAMMER:   S. CALFEE
	.SBTTL*
	.SBTTL*CHECKER:
	.SBTTL*
	.SBTTL****************************
;
;DATE INITATED: 4/28/78
;PROJECT CHARGE #: 20000
;DISK #: 20
;HARDWARE REQUIREMENTS: PINBALL ELECTRONICS 6800
;
;
;
;
;MEMORY REQUIREMENTS:
;		BASE PAGE RAM: 00-4F
;		BATTERY BACKUP: CMOS 256X4
;		ROM: 7800-7FFF
;
;INTERRUPT REQUIREMENTS:
;		IRQ 2 MSEC
;
;
;
;
;ASSEMBLY COMMAND STRING:
;
;
;
;
;
;LINK COMMAND STRING:
;		3M:/L,LP:/A=DK1:ROCKY,PINTER,PINBL1
;
;
;
;
;PROGRAM DESCRIPTION:
;PINBOL VIRTUAL MACHINE EMULATOR OPERATION SYSTEM PVME/OS 1.0
;REQUIRES INTERP & PINBOL SOURCE TO RUN
;DATA STRUCTURES PVME/OS 1.0
;
;***SOLENOID CONTROL BYTES
;SOLC1 7 6 5 4 3 2 1 0  BITS
;      7 6 5 4 3 2 1 0  SOLENOID #(1=PULSE SOL.)
;
;SOLC2 7 6 5 4 3 2 1 0  BITS
;      15 14 13 12 11 10 9 8  SOLENOID # (1=PULSE SOL)
;
;SOLC3 7 6 5 4 3 2 1 0  
;      23 22 21 20 19 18 17 16  GATE # (1=GATE ON, 0=OFF)
;	G2 G4--G1 G3-FL
;***STATUS FLAG
;	STATFLG	7 6 5 4 3 2 1 0  BITS
;               T A L N S X R2 R1
;
;	FLAG		DESC.		0=		1=	SET	CLEARED
;
;	T		TILT		NO TILT		TILTED	INTERP
;	A		ATTRACT		GAME		ATTRACT	OS
;	L		LAST BALL	NOT LAST	LAST BALL OS
;	N		NEXT BALL	NOT NEXT	NEXT BALL INTERP/OS	INTERP
;	S		SCORED 		NO SCORE	PLAYSCORE OS
;	X		XTRA BALL	NO XBALL	XBALL	INTERP/OS	INTERP
;	R2		2 REPLAYS	NO REPL.	2 REPL.	INTERP		OS
;	R1		1 REPLAY	NO REPL		1 REPL	INTERP		OS
;
;***SOUND CONTROL
;
;SNDRAM 20 BYTES-COUNTERS FOR SOUNDS 0-19
;COUNT=-256 MAKE N SOUNDS & SCORES
;COUNT=0 SOUND INACTIVE
;
;
	.=0
;*GLOBALS
	.GLOBL	SOLENOID,SNDRAM,LIGHTS,NEWSWT,FLAGS,SWSTAT	;BASE PAGE
	.GLOBL	START,TIMER,MINC,SCRE,SNDQUE			;INTERP ENTRY POINTS
	.GLOBL	SWTIN,SWTCNT				;HARDWARE CONSTANTS
	.GLOBL	NEXTPL,PWRON,CLIT,TOOS			;OP SYS ENTRY POINTS
	.GLOBL	SNDDES,REPSND,SOLSTATE,SAVSTATE		;EXTERNALS
	.GLOBL	BATTERY		;BACK UP RAM 
	.GLOBL	RAMTS2		;INTERP RAM TEST CELL
	.GLOBL	PMATCH		;USER MATCH TABLE POINTER
	.GLOBL	TEST					;SELF TEST
	.GLOBL	PHASE,CREDIT,TLMTR,REP1	;TEST LINKAGE
	.GLOBL	DISP,HISCORE,PMAREA,BATEND	;TEST LINKAGE
	.GLOBL	INDEX,CLITE
	.GLOBL	BLCOIN,BRCOIN,BHLCOIN,BHRCOIN,BCHSM
	.GLOBL	COINST,POSTSL,SLMTIM,PINCOIN
	.GLOBL	DISBLK,DISSET,DISPLP		;DISPLAY OUTPUT ROUTINES
	.GLOBL	RAMTS1,TSTFLG,DELCNT,PLAYN
	.GLOBL	REP1,REP3,HISCORE,SWITCH
	.GLOBL	IRQ,VREPS
	.GLOBL	SOLC1,SOLC2,SOLC3
	.GLOBL	UMAXBL,UMAXPL			;USER TABLES
	.GLOBL	OPTION,COP1,COP2			;I/O EQUATES
	.GLOBL	RESREP				;ENTRY TO RESET REPLAYS
	.PAGE
;*LIGHTS + FLAGS
RAMTS1:	.BLKB	1		;RAM TEST CELL
LIGHTS:	.BLKB	8		;FLAGS
FLAGS:	.BLKB	8		;FLAGS
STATFLG	=FLAGS+7		;STATUS FLAG
;*SWITCH SCAN RAM
SWTCNT	=8.			;# BYTES OF SWITCHES
SWTIN:
SWRAM	=.
DB1100:	.BLKB	1		;FIRST DEBOUNCE
DB1101:	.BLKB	1
DB1102:	.BLKB	1
DB1103:	.BLKB	1
DB1104:	.BLKB	1
DB1105:	.BLKB	1
DB1106: .BLKB	1
DB1107:	.BLKB	1
SWSTAT:
SWS100:	.BLKB	1		;STATUS
SWS101:	.BLKB	1
SWS102:	.BLKB	1
SWS103:	.BLKB	1
SWS104:	.BLKB	1
SWS105:	.BLKB	1
SWS106: .BLKB	1
SWS107:.BLKB    1
NEWSWT:
T100:	.BLKB	1		;TRIGGERS
T101:	.BLKB	1
T102:	.BLKB	1
T103:	.BLKB	1
T104:	.BLKB	1
T105:	.BLKB	1
T106:	.BLKB 	1
T107:	.BLKB	1
;*SOLENOID CONTROL
SOLENOID:
SOLC1:	.BLKB	1		;SOLENOID CONTROL BYTE 1
SOLC2:	.BLKB	1		;SOLENOID CONTROL BYTE 2
SOLC3:	.BLKB	1		;GATE CONTROL
SOLE:  .BLKB	2		;SOLNOID ENABLE
SCUR:	.BLKB	1		;CURRENT SOLENOID ACTIVE COUNTER
;*SOUND ROUTINE PARAMETERS
SNDRAM:	.BLKB	20.		;SOUND COUNTERS
LASTSND:.BLKB   1		;LOWEST PRIORITY SOUND
SNDPAUSE:.BLKB  1		;DELAY BETWEEN SOUNDS
SNDCNT:	.BLKB	1		;CURRENT SOUND CNT
SNDNAM:	.BLKB	1		;CURRENT SOUND #
;
;COIN ROUTINE VARIABLES
COINST:	.BLKB	2		;COIN TIMERS
POSTSL:	.BLKB	2		;POST COIN SLAM TIMERS
SLMTIM:	.BLKB	1		;PRE-SLAM TIMER
;*TEMPORARIES
SCAD1:	.BLKB	2
SCAD2:	.BLKB	2
SCAD3:	.BLKB	2
TEMPI:	.BLKB	2		;INDEX REG. TEMP MUST BE USED WITH INTS OFF
TEMPI2: .BLKB	2		;USE WITH INTS OFF
IRQTMP:	.BLKB	2		;INTERRUPT TEMP
;*PLAYER MEMORY AREA
;*GENERAL VARIABLES
MAXB:	.BLKB	1		;MAX BALLS
MAXP:	.BLKB	1		;MAX PLAYERS
BALLN:	.BLKB	1		;CURRENT BALL
PLAYN:	.BLKB	1		;CURRENT PLAYER 0,1,2,3
MAXCRD:	.BLKB	1		;MAX CREDIT
SEED:	.BLKB	1		;MATCH SEED
COLCNT:	.BLKB	1		;DISPLAY COLUMN CT.
PHASE:	.BLKB	1		;INTERRUPT COUNTER X2 MSEC
P16MS:  .BLKB	1		;16 MS COUNTER
DELCNT: .BLKB	1		;DELAY COUNTER COUNTS DOWN TO 0 EVERY 16 MS
TSTFLG:	.BLKB	1		;TEST MODE FLAG
HZ:	.BLKB	2		;MIN TIMER
CRED:	.BLKB	1		;CREDIT
PMGTP1: .BLKB   2		;PMGET TEMPS
PMGTP2:	.BLKB   2
OLDSCR:	.BLKB	3		;TEMP USED FOR REPLAYS
REPTM1	=PMGTP1		;TEMP USED BY REPLAYS
REPTM2	=PMGTP2			;TEMP FOR REPLAYS
KPLIVE:	.BLKB	2		;KEEP ALIVE COUNTER
	.PAGE
;*BATTERY BACK-UP
	.=800
BATTERY:			;ADDRESS OF BATTERY BACK-UP
;*METERS IN LSN BATTERY BACK-UP
CREDIT:	.BLKB	6		;CREDIT METERS
LCMTR:	.BLKB	6		;LEFT COIN
RCMTR:	.BLKB	6		;RT COIN
TCMTR:	.BLKB	6		;TOTAL COIN
PLMTR:	.BLKB	6		;PLAYS
RPMTR:	.BLKB	6		;REPLAYS
TMMTR:	.BLKB	6		;TIME
SPMTR:	.BLKB	6		;SPECIALS
XBMTR:	.BLKB	6		;XTRA BALLS
TLMTR:	.BLKB	6		;TILTS
BEMTR:	.BLKB	6		;BATTERY ERRORS
;*
;* REPLAY LEVELS
;*
REP1:	.BLKB	7		;LO REPLAY LEVEL
REP2:	.BLKB	7		;MID  "
REP3:	.BLKB	7		;HI   "
ENDMTR:
PMAREA:	.BLKB	12.*2*4		;PLAYER MEMORY AREA
PMEND	=.-1
BLCOIN: .BLKB	1		;LEFT COIN COUNTER
BRCOIN:	.BLKB	1		;RIGHT COIN COUNTER
BHLCOIN:.BLKB	1		;HALF CREDIT HOLDER LEFT
BHRCOIN:.BLKB	1		;HALF CREDIT HOLDER RIGHT
DISP:	.BLKB	7*6.		;SCORE DISPLAY
HISCORE =.-7
BCHSM:	.BLKB	6		;5 CHECKSUMS AND A FLAG
BTMP:	.BLKB	6		;OLDSCR TEMPORARY STORAGE AREA
BFREE:
BATEND	=BATTERY+100
R1CHSM	=BCHSM+1-REP1+7
R2CHSM	=BCHSM+2-REP2+7
R3CHSM	=BCHSM+3-REP3+7
R4CHSM	=BCHSM+4-HISCORE+7
RMCHSM	=BCHSM+5-REP1
	.PAGE
;*CONSTANTS
CRDISP	=DISP+32.		;CREDIT DISPLAY
BLDISP	=DISP+28.		;BALL DISLAY
OPTBK1	=2000
OPTBK2	=2001
OPTBK3	=2002
OPTBK4	=2003
STRTSW	=T100			;OPERATING SYSTEM SWITCHES
MRSW	=T100			;METER RESET
TLTSND  =SNDRAM
CRDSND	=SNDRAM+1
STSND	=SNDRAM+2			;START SOUND
MCHSND  =SNDRAM+3		;MATCH SOUND
RPSND	=SNDRAM+4
FREQAMP =1820
WAVEN	=1800
DISPLAY	=1841			;DISPLAY DATA
IRES	=18E0			;INT RESET
WRES	=18C0			;WATCHDOG
SOLAD	=1880			;SOLENOID ADDRESS
GATEAD  =18A0			;INDEPENDENT SOLENOIDS
SOLEN	=18A7			;ENABLE EXCLUSIVE SOLENOIDS
LAMPS	=1860			;LAMP OUTPUT
SWITCH	=1000			;SWITCH INPUT
CHSM	=0			; RAM USED IN ROM TEST
ROM0	=2800			;ROMS AT 2800,3000,3800
LED	=WAVEN			;FOR TEST LED'S
	.CSECT
OPTION  =OPTBK1
COP1	=OPTBK3
COP2	=OPTBK4
	.PAGE
	.SBTTL	NON-INTERRUPT OPERATING SYSTEM
;
;ROUTINE TO TEST O.S. SWITCHES AND TO ACT.
;INTERRUPTS ARE OFF ON ENTRY
;
TOOS:
NOTINT: LDAA	D,NEWSWT
	BITA	I,81		;IS IT SELF-TEST
	BEQ	NOTEST		;NO
GOTEST:	JMP	RAMTST		;GO TO SELF TEST
NOTEST:	BITA	I,8		;TEST COIN BIT
	BNE	10$
	JMP	NOSLOW		;NOT ON
;*TURN ON MILLIONS LIGHTS
10$:
	LDX	I,HISCORE
20$:	SEI			;THIS ALLOWS AN INTERRUPT IF PLEADING
	LDAB	X,6		;GET MILLIONS DIGIT
	ANDB 	I,0F
	CPX	I,HISCORE
	BNE	30$
	TST	E,P16MS		;TEST IF A DISPLAY SCORE PHASE
	BMI	25$		;YES
	LDAA	D,STATFLG	;ATTRACTING?
	ANDA	I,40
	BEQ	25$		;NO
	TST	E,OPTBK3	;HSTD DISPLAY
	BMI	25$		;NOT IN SCORES
;
;HIGH SCORE TO DATE IS NOW IN THE SCORE DISPLAYS
;
	ORAA	D,LIGHTS+6
	STAA	D,LIGHTS+6	;SET H.S.T.D. LAMP
	CLRA			;FLAG TO LEAVE LOOP
	CMPB	I,0F		;IS THE HSTD OVER A MILLION?
	BEQ	29$		;NO-SO NEITHER ARE THE REST
	LDAB	I,2F		;TURN ALL THE MILLION LIGHTS ON
	BRA	35$
25$:	LDAA	I,0BF
	ANDA	D,LIGHTS+6	;REMOVE H.S.T.D
	STAA	D,LIGHTS+6
	LDAA	I,0D0
	ANDA	D,LIGHTS+7
	STAA	D,LIGHTS+7
29$:	LDAA	I,20		;LOOP COUNTER
30$:	SUBB	I,0F		;MILLIONS SET?
	BEQ	40$
	TAB
35$:	ORAB	D,LIGHTS+7	;GET ON LIGHTS
	STAB	D,LIGHTS+7
40$:	DEX
	DEX
	DEX
	DEX
	DEX			;MOVE TO NEXT SCORE
	DEX
	DEX
	LSRA			;???? MASK
	BNE	20$		;STILL MORE
	LDAB	D,LIGHTS+7
	BITB	I,10		;TEST MATCH LIGHT
	BNE	60$
	ORAB	I,40		;IF NOT ON, SET BALL LIGHT
	STAB	D,LIGHTS+7
60$:	CLI			;INTS BACK ON
;*MISC. MAINTAINANCE
	LDAB	E,OPTBK1	;GET MAX BALL, MAXCRD, FREE PLAY OPTIONS
	LDX	I,CREDIT	;DISPLAY CREDIT
	JSR	GBYTE
	BITB	I,20		;TEST IF FREE PLAY
	BEQ	70$		;NOT FREE
	LDAA	I,1		;GIVE 1 CREDIT
70$:
	STAA	CRED
	LDX	I,CRDISP
	JSR	SBYTE
	LDAA	E,UMAXBL	;LOW BALLS PRE GAME
	BITB	I,8
	BEQ	80$
	LDAA	E,UMAXBL+1	;HIGH BALLS PER GAME
80$:	STAA	MAXB
	ANDB	I,7		;GET MAX. CREDIT DIVIDED BY 5
	CLRA
90$:	ADDA	I,5		;5 TIMES OPTION
	DAA			;IN DECIMAL
	DECB
	BPL	90$
	SEI
	STAA	MAXCRD
	LDAA	STATFLG		;CHECK CREDIT
	TAB
	ANDA	I,3
	ANDB	I,0FC		;RESET
	STAB	STATFLG
	JSR	CLITE		;GIVE CREDITS
;
;TEST FOR SCORE REPLAYS
;
	JSR	REPLAY
	LDAA	D,STATFLG
	BITA	I,40		;TEST ATTRACT FLAG
	BEQ	NOSLOW		;NO - IN A GAME
;
; TEST BATTERY RAM FOR BCD CHANGES
;
	LDX	I,REP1-1	;END OF VALID CHECK
	LDAB	I,-<REP1-1-BATTERY>	;LENGTH
	JSR	UNBLNK		;UNBLANK BATTERY BACKUP
	JSR	VREPS		;VALIDATE REPLAY LEVELS
NOSLOW:	LDAA	D,NEWSWT	;TEST BIT 2-START
	BITA	I,4
	BEQ	30$
	BSR 	STRT		;ENTER START ROUTINE
30$:	SEI
	LDAB	I,083		;LEAVE TEST ALONE
	ANDB	D,NEWSWT	;CLEAR THE REST
	STAB	D,NEWSWT
	RTS			;DONE WITH SWITCH PROCESSING


	.SBTTL	START PLAYER
;*START ROUTINE
STRT:	LDAA	CRED		;CREDIT
	BEQ	1$		;NO, EXIT
	LDAA	STATFLG		;ATTRACT?
	BITA	I,40
	BNE	2$		;YES, 1ST START
	LDAA	MAXP		;4 PLAYERS?
	CMPA	E,UMAXPL	;MAX PLAYERS IN THIS GAME
	BEQ	1$		;YES
	LDAA	BALLN		;PAST 1ST BALL?
	CMPA	I,1
	BEQ	4$		;NO
1$:	RTS
2$:	JSR	DISBLK		;BLANK DISPLAY
	CLRA			;SET-UP FLAGS
	STAA	PLAYN
	STAA	MAXP
	INCA
	STAA	BALLN
	STAA	E,BLDISP	;DISPLAY BALL NO.
	SEI				;INTS OFF
	LDAA	I,40			;TURN ON BALL LOOP
	ORAA	D,LIGHTS+7
	ANDA	I,6F			;TURN OFF MATCH/GAME OVER
	STAA	D,LIGHTS+7
	CLI
	LDX	I,PMAREA		;CLEAR SCORES, MEMORY
3$:	CLR	X,0
	INX
	CPX	I,PMEND
	BNE	3$
	JSR	PMGET
	LDAA	I,10
	STAA	STATFLG		;SET STATUS
	JSR	ORSTAT		;TURN A SWITCH ON!
4$:	LDAA	MAXP		;PUT ZERO FOR PLAYER
	TAB			;MULT BY 7
	ASLA
	ASLA
	ASLA
	SBA
	LDX	I,DISP
	JSR	INDEX
	CLR	X,0		;DISPLAY LOW 2 DIGITS OF PLAYERS SCORE
	CLR	X,1
	INC	MAXP
	LDAA	I,PLMTR-BATTERY		;INC TOTAL PLAYS
	JSR	MINC
	SEI
	LDAA	I,40		;TOTAL PLAYER COUNTER
	ORAA	D,SOLC2		;OR IN SOLENOIND 14
	STAA	D,SOLC2
	INC	STSND		;MAKE SOUND
	LDAA	I,99		;DEC CREDIT BY 1
	JMP	CLIT2
	.PAGE
	.SBTTL	NEXT PLAYER OR BALL
;*CALCULATE PLAYER MEMORY ADDRESS
;*STORE ADDRESS IN TEMP1
PMAD:	LDAA	PLAYN		;MULTIPLY X 24
	ASLA
	ASLA
	ASLA			;A=PLAYN*8
	TAB
	ASLA			;A=PLAYN*16, B=PLAYN*8
	ABA			;A=PLAYN*24
	LDX	I,PMAREA
	JSR	INDEX
	STX	PMGTP1
	RTS
;
;ENTERED BY INTERP TO STEP TO THE NEXT BALL OR PLAYER
;
;*NEXT-PLAYER/BALL ROUTINE
NEXTPL:
	JSR	REPLAY		;FINAL UPDATE OF H.S.T.D
;*PLAYER MEMORY SAVE
PMSAVE:	BSR	PMAD
	LDX	I,8.+4.
	STX	PMGTP2
PMSLP:	LDAB	X,LIGHTS-1
	LDX	I,SAVSTATE	;MEMORY MASK
	LDAA	D,PMGTP2+1	;GET BYTE NUMBER+1
	DECA
	JSR	INDEX		;POINT TO MEMORY TABLE
	ANDB	X,0		;MASK TO BITS TO SAVE
	TBA			;A=RESULT TO SAVE
	LDX	PMGTP1
	JSR	SBYTE1
	STX	PMGTP1
	LDX	PMGTP2
	DEX
	STX	PMGTP2
	BNE	PMSLP
	SEI
	LDAA	I,0F7		;OFF SCORED FLAG
	ANDA	STATFLG
	STAA	STATFLG
	CLI
	LDAA	PLAYN
	INCA
	CMPA	MAXP
	BNE	20$
	INC	BALLN
	LDAB	BALLN
;
;AT THIS POINT X=0
;
	CMPB	I,2		;END OF FIRST BALL?
	BNE	10$		;NO
	STX	E,BLCOIN	;CLEAR COIN COUNTER
	STX	E,BHLCOIN	;BOTH LEFT AND RIGHT
10$:	CMPB	MAXB
	BHI	MATCH
	BNE	15$
	LDAA	I,20		;ON LAST BALL FL
	JSR	ORSTAT		;GET STATFLG
15$:	CLRA
	STAB	E,BLDISP	;DISPLAY BALL #
20$:	STAA	PLAYN
;*GET PLAYER MEMORY
PMGET:
	LDX	I,8+4
	STX	PMGTP2
	BSR	PMAD
PMGLP:  LDX	PMGTP1
	JSR	GBYTE1
	STX	PMGTP1
	LDX	PMGTP2
	STAA	X,LIGHTS-1
	DEX
	STX	PMGTP2
	BNE	PMGLP
	RTS
;
;DO MATCH CHECKS AT THE END OF A GAME
;
MATCH:  SEI
	LDAA	I,80			;GAME OVER LIGHT
	TST	E,OPTBK1		;MATCH?
	BMI	10$			;NO MATCH
	LDAA	I,90			;GAVE OVER AND MATCH
10$:	ORAA	D,LIGHTS+7
	ANDA	I,0BF			;REMOVE BALL LIGHT
	STAA	D,LIGHTS+7
	CLI
	BITA	I,10			;IS TH_RE A MATCH
	BEQ	90$			;NO MATCH!!
	LDAA	I,8
	JSR	ORSTAT		;DONT FLASH SCSORE
	CLR	E,BLDISP	;ZERO BALL NUMBER
	LDAA	D,SEED		;START MATCH
	STAA	E,BLDISP+1	;WITH SEED
	LDAA	E,PMATCH	;GET INITIAL DELAY
	LDAB	E,PMATCH+1	;GET DELTA FOR DELAY
	LDX	E,PMATCH+2	;GET LOOP COUNTER
	BEQ	60$		;NO LOOPS JUST MATCH
;
; MAKE THE MATCH SOUND AND DELAY
;
20$:	STAA	D,DELCNT	;GET DELAY LENGTH
30$:	INC	MCHSND		;REQUEST A SOUND
	PSHA			;SAVE DELAY AMOUNT
40$:	WAI			;HANG AROUND
	LDAA	D,DELCNT	;DONE?
	BNE	40$		;NOPE
	LDAA	E,BLDISP+1
	ADDA	I,1		;INCR MATCH NUMBER
	DAA
	STAA	E,BLDISP+1
	LDAA	D,PHASE		;FETCH A RANDOM NUMBER
	ROLA
	ROLA			;MOST RANDOM IN HIGH 4 BITS
	ROLA
	ROLA
	STAA	E,WAVEN		;SELECT A NEW WAVEFORM
	PULA			;RESTORE DELAY AMOUNT
	SBA			;DO DELTA DELAY
	DEX
	BNE	20$		;DO NEXT SOUND
;NOW CHECK IF ANY MATCHES
60$:	CLRB			;MATCH COUNT
	LDX	I,DISP+1	;POINT TO FIRST MATCH DIGIT
70$:	LDAA	E,BLDISP+1	;GET MATCH
	SUBA	X,0		;TEST THE ONE DIGIT
	BITA	I,0F
	BNE	80$
	INCB			;COUNT MATCHES
80$:	LDAA	I,7
	JSR	INDEX		;MOVE TO NEXT SCORE
	CPX	I,BLDISP+1	;DONE?
	BNE	70$
	TBA
	JSR	CLITE		;AWARD CREDIT
90$:	LDAA	I,40		;START ATTRACT MODE
	JMP	ORSTAT		;GET IN STATFLG
	.PAGE
	.SBTTL	IRQ ROUTINE
;*IRQ ROUTINE
;*DISPLAY STROBE ROUTINE
IRQ:
	STAA	E,IRES		;INTERRUPT ACK
	LDAA	I,0AA		;VALIDATE THAT RAM IS OK
	CMPA	D,RAMTS1
	BNE	20$		;ERROR RESTART
	LSRA
	CMPA	D,RAMTS2
	BEQ	DISPST		;GOOD RAM, CONTINUE
20$:	SWI			;ERROR- BAD STACK, OR RAM
DISPST: DEC	E,COLCNT		;NEXT DISPLAY COLUMN
	BNE	10$			;NO WRAP
	LDAA	I,6
	STAA	D,COLCNT
10$:
	LDAB	I,DISP/256.		;GET ADDR
	STAB	IRQTMP
	STAB	D,TEMPI2		;SAVE H.S. PTR
	LDAA	D,COLCNT		;DIGIT OFFSET
	DECA				;1 TO 6 CHANGES TO 0 TO 5
	STAA	IRQTMP+1
	ADDA	I,5.*7.			;POINT TO H.S
	STAA	D,TEMPI2+1
;
;OUTPUT SCORES FLASH PLAYER UP IF HE (SHE) HASNT SCORED
;
	LDAB	I,DISPLAY/256.
	STAB	D,TEMPI		;OUTPUT ADDR=20X
	LDAB	D,STATFLG
	LDAA	I,DISPLAY&255.		;OUTPUT ADDR 2041-2046
COLLOP:	STAA	D,TEMPI+1	;OUTPUT ADDR LOW
	ANDA	I,7
	DECA			;GET PLAYER NUMBER
	CMPA	D,PLAYN		;IS HE UP?
	BNE 	30$		;NO
	BITB	I,48		;ATTRACTING OR ALREADY SCORED?
	BNE	30$		;YES NO FLASH
	LDAA	D,PHASE
	BITA	I,0C0		;DUTY CYCLE OF FLASH
	BNE	30$		;DISPLAY NOW
	LDAA	I,0FF		;BLANK CODE
	BRA	40$
;
; HANDLER FLASHING HIGH SCORE TO DATA
;
30$:	BITB	I,40		;ATTRACTING?
	BEQ	37$		;NO IN A GAME
	LDAA	D,P16MS		;SLOW TIMER
	BMI	37$		;SCORE THESE 2 SECONDS
	TST	E,OPTBK3
	BMI	37$		;NO H.S.T.D. DISPLAY
	LDX	D,TEMPI2	;GET HIGH SCORE PTR
	LDAA	D,IRQTMP+1	;GET LOW PTR
	CMPA	I,4*7
	BLT	38$		;DON'T DISPLAY H.S. IN CREDIT/MATCH
37$:
	LDX	D,IRQTMP	;GET SCORE POINTER
38$:	LDAA	X,DISP&255.	;GET THIS DIGIT
40$:	LDX 	D,TEMPI		;GET OUTPUT ADDRESS
	STAA	X,0		;OUTPUT DIGIT
	LDAA	I,7
	ADDA	D,IRQTMP+1	;BUMP SCORE POINTER
	STAA	D,IRQTMP+1
	LDAA	D,TEMPI+1
	INCA
	CMPA	I,47		;DONE?
	BNE	COLLOP		;DO NEXT PLAYERS DIGIT
	LDAA	D,COLCNT
	COMA
	STAA	E,DISPLAY+6	;SELECT DIGIT
;
;DEBOUNCE FIRST 4 SWITCH BYTES EVERY 4 MS
;DEBOUNCE LAST 4 SWITCH BYTES EVERY 2 MS
;
	X=7
	.REPT	4
	LDAA	E,SWITCH+X	;READ THE SWITCH
	COMA			;POSITIVE TRUE NOW
	ANDA	I,3F
	LDAB	D,DB1100+X	;LAST INTERRUPTS READING
	STAA	D,DB1100+X
	TBA
	ANDB	D,DB1100+X	;1'S WHERE TWICE 1'S
	ORAA	D,DB1100+X	;0'S WHERE TWICE 0'S
	ANDA	D,SWS100+X	;TWICE 0'S=0'S
	STAA	D,SWS100+X	;UPDATE 0'S
	ORAB	D,SWS100+X	;NEW STATUS
	STAB	D,SWS100+X	;SAVE NEW STATUS
	COMA
	ANDA	D,SWS100+X	;NEW=1, OLD=0
	ORAA	D,NEWSWT+X	;GET NEW 1'S
	STAA	D,NEWSWT+X	;LATCH THEM
	X=X-1
	.ENDR
	LDAA	D,PHASE		;GET
	LSRA
	BCC	FASTSOL
	.REPT	3
	LDAA	E,SWITCH+X	;READ THE SWITCH
	COMA			;POSITIVE TRUE NOW
	ANDA	I,3F
	LDAB	D,DB1100+X	;LAST INTERRUPTS READING
	STAA	D,DB1100+X
	TBA
	ANDB	D,DB1100+X	;1'S WHERE TWICE 1'S
	ORAA	D,DB1100+X	;0'S WHERE TWICE 0'S
	ANDA	D,SWS100+X	;TWICE 0'S=0'S
	STAA	D,SWS100+X	;UPDATE 0'S
	ORAB	D,SWS100+X	;NEW STATUS
	STAB	D,SWS100+X	;SAVE NEW STATUS
	COMA
	ANDA	D,SWS100+X	;NEW=1, OLD=0
	ORAA	D,NEWSWT+X	;GET NEW 1'S
	STAA	D,NEWSWT+X	;LATCH THEM
	X=X-1
	.ENDR
	LDAA	E,SWITCH+X	;READ THE SWITCH
	COMA			;POSITIVE TRUE NOW
	LDAB	D,DB1100+X	;LAST INTERRUPTS READING
	STAA	D,DB1100+X
	TBA
	ANDB	D,DB1100+X	;1'S WHERE TWICE 1'S
	ORAA	D,DB1100+X	;0'S WHERE TWICE 0'S
	ANDA	D,SWS100+X	;TWICE 0'S=0'S
	STAA	D,SWS100+X	;UPDATE 0'S
	ORAB	D,SWS100+X	;NEW STATUS
	STAB	D,SWS100+X	;SAVE NEW STATUS
	COMA
	ANDA	D,SWS100+X	;NEW=1, OLD=0
	ORAA	D,NEWSWT+X	;GET NEW 1'S
	STAA	D,NEWSWT+X	;LATCH THEM
;
;	FIRE FAST SOLENOIDS IF ON
;
FASTSOL:LDAA	D,T106		;NEXT TO LAST DEBOUNCED SWITCH BYTE
	ANDA	D,SOLE		;MASK WITH ENABLE
	TAB
	EORB	D,SOLE		;REMOVE THE BITS FOR NEXT TIME
	STAB	D,SOLE
	ORAA	D,SOLC1		;MERGE WITH CURRENT
	STAA	D,SOLC1		;AND FIRE THE SOLENOID
	BEQ	20$		;NONE NOW
	JSR	SOL2MS		;FIRE!!
20$:	LDAA	D,T107		;LAST SWITCH BYTE
	ANDA	D,SOLE+1	;SECOND ENABLE BYTE
	TAB
	EORB	D,SOLE+1	;REMOVE THE ENABLE
	STAB	D,SOLE+1
	ORAA	D,SOLC2
	STAA	D,SOLC2		;AND FIRE ANY NEW SOLENOIDS
	BEQ	40$		;NONE NOW
	JSR	SOL2MS		;FIRE!!
40$:
;
; PREVENT STACK OVERFLOW
;
	STS	D,TEMPI		;GET SP
	LDAA	D,TEMPI+1	;GET LOW BYTE
	CMPA	I,0E5		;PROTECTION LIMIT
	BHI	50$		;STACK IS OK
	RTI			;PREVENT OVERFLOW
50$:
	INC	E,PHASE
;*MAINTAINANCE
EVNPH2: CLI			;INTS ON!
	LDAA	D,PHASE
	LSRA			;TEST FOR 4MS INTERRUPTS
	BCS	ODDPH2		;HANDLE KPLIVR 
;REFRESH LAMPS
	X=0
	.REPT	4
	LDX	D,LIGHTS+X
	STX	E,LAMPS+X	;OUTPUT EVERY 4MS
	X=X+2
	.ENDR
	BRA	EVNPH1
ODDPH2:
;
;DECR COUNTER IF NOT ZERO 4 MILLISECONDS
;
	LDAA	D,DELCNT	;ZERO?
	BEQ	5$		;YES, EXIT
	DEC	DELCNT
;
; KEEP LAMPS ALIVE- ON 2MS EVERY 36 MS
;
5$:	DEC	E,KPLIVE+1	;LOW KPLIVE COUNTER
	BGT	7$		;DO NEXT BYTE
	LDX	I,LAMPS&0FF00+9.;ONE MORE THAN MAX INDEX
	STX	D,KPLIVE	;RESET COUNTER
	BRA	10$		;DONE OUTPUT THIS TIME
7$:	LDX	D,KPLIVE	;GET INDEX
	TST	E,OPTBK2	;DO WE USE KEEP ALIVE?
	BMI	10$		;NO, LEAVE THEM ALONE
	LDAA	I,0FF
	STAA	X,LAMPS&255.-1	;LAMP ADDRESS LOW
10$:
15$:	LDAB	D,TSTFLG
	BMI	EVNPH1		;TESTING
	JSR	PINCOIN		;TEST FOR COINS
EVNPH1:	LDAA	PHASE
	INCA			;CONTROL TIMING INTERVAL
	BITA	I,3		;8 MSEC?
	BNE	CHKTIM
	JSR	SCAUD		;DO SCORE, AUDIO
	JSR	SNDQUE		;HANDLE SOUND QUEUE
	JSR	SOL		;DO SOL.
	STAA	E,WRES		;WATCH DOG
CHKTIM:	LDAA	D,PHASE
	ADDA	I,2		;OFF SYNC
	BITA	I,7
	BNE	MISC
	INC	P16MS		;16 MS TIMER
20$:	LDAB	D,TSTFLG
	BMI	MTX		;LEAVE
;*TIME METER ROUTINE
TIME:	LDAA	STATFLG		;ATTRACT?
	BITA	I,40
	BNE	TIMX		;YES, EXIT
	LDX	HZ
	INX
	STX	HZ
	CPX	I,3750.
	BNE	TIMX
	LDX	I,0
	STX	HZ
	LDAA	I,TMMTR-BATTERY
	JSR	MINC
TIMX:
20$:
	JSR	TIMER		;DO INTERP TIMING
	DEC	E,SEED		;RANDOM NUMBER
	BPL	MTX
	LDAA	I,9		;RANGE 9 TO 0
	STAA	D,SEED
MTX:	RTI
MISC:	LDAA	D,P16MS
	ANDA	I,0F		;ONLY EVERY QUARTER SECOND
	BNE	MTX		;NOT NOW
	SEI			;INTS OFF
	LDAA	I,8.
	ORAA	D,NEWSWT	;SET MISC SWITCH
	STAA	D,NEWSWT
	RTI			;LEAVE
;
;ENTERED ON 2MS INTERRUPT IF A SOLENOID IS REQUESTED
;
SOL2MS:	LDAA	D,SCUR
	BNE	GATEX		;BUSY, SO LEAVE
;
;MAIN SOLENOID ROUTINE - ENTERED EVERY 8 MS.
;
;*SOLENOID ROUTINE
SOL:	SEI
	NOP
	LDAA	SCUR		;CNT=0?
	BNE	SOLX		;YES
NSOL:	LDAB	I,0FF
	LDAA	SOLC1
	BNE	SOL2
	LDAA	SOLC2
	BEQ	SOLX
	LDAB	I,7
SOL2:	INCB
	LSRA
	BCC	SOL2
GSOL:	PSHB			;RESET BIT IN WORD
GSLP:	ASLA
	DECB
	CMPB	I,0FF
	BEQ	GSOL1
	CMPB	I,7
	BNE	GSLP
	STAA	SOLC2		;RESTORE
	BRA	GSOL2
GSOL1:	STAA	SOLC1
GSOL2:  PULA
	STAB	E,SOLEN		;TOGGLE ENABLE BIT
	CLR	E,SOLEN
	LDX	I,SOLSTATE-3
	STAA	E,SOLAD		;ON NEW SOLENOID
	JSR	INDEX
	LDAA	X,0
	INCA			;COMPENSATE FOR NEXT DEC
	STAA	SCUR		;GET COUNT
SOLX:	CLI
	LDAA	SCUR		;NONE ACTIVE
	BEQ	SOLEND		;YES
	DEC	SCUR
	BNE	GATE
SOLEND:	CLR	E,SOLAD		;SOLENOID DISABLE
;*GATE ROUTINE
GATE:	LDX	I,GATEAD
	LDAA	I,6		;BIT COUNTER
	LDAB	D,SOLC3
10$:	STAB	X,0		;OUTPUT THIS BIT
	INX
	LSRB			;GET NEXT BIT
	DECA
	BNE	10$
GATEX:	RTS
	.PAGE
SCINC:	INC	SCAD1+1
	LDAA	SCAD2		;INCREMENT OFFSETS
	INCA
	STAA	SCAD2
	CMPA	I,20.		;DONE?
	BNE	SCLP		;NO
SCINC1:
	TST	E,LASTSND
	BEQ	SCINC2		;NOT ON
	DEC	E,LASTSND
SCINC2:	CLR	WAVEN		;SOUND OFF
	LDAA	I,2
	STAA	D,SNDPAUSE	;PAUSE BETWEEN SOUNDS
	LDAA	I,0FF
	STAA	SNDNAM		;NO SOUND NAME
	RTS
;*SOUND + SCORE ROUTINE
SCAUD:  TST	E,SNDPAUSE	;DELAYING?
	BEQ 	20$
	DEC	E,SNDPAUSE	;YES, COUNT
	RTS
20$:
	LDX	I,SNDRAM	;SETUP POINTER
	STX	SCAD1
	CLR	SCAD2		;CLEAR OFFSET
SCLP:	LDX	SCAD1		;LOOK FOR ACTIVE SOUND
	LDAA	X,0		;ACTIVE
	BEQ	SCINC		;NO
	LDAA	SNDNAM		;SOUND OVERRIDE?
	BMI	SC0		;NO
	CMPA	SCAD2
	BEQ	SC00		;NO
	LDX	I,SNDRAM	;DECREMENT OVERRIDDEN SOUND
	JSR	INDEX
SC:	DEC	X,0
SC0:	CLR	SNDCNT		;RESET COUNT
	LDAA	SCAD2
	STAA	SNDNAM
SC00:	ASLA			;MULT BY 6
	TAB
	ASLA
	ABA
	LDX	I,SNDDES
	JSR	INDEX
	STX	SCAD3		;SAVE SOUND TABLE ADDR
	LDAA	X,2		;CHECK 1/2 WAY
	LDAB	X,3		;CHECK FOR END
	LDX	SCAD1
	CMPA	SNDCNT		;HALF WAY?
	BHI	SC2		;NO
	LDAA	X,0		;MORE SOUNDS?
	CMPA	I,1
	BHI	SC		;YES
SC2:	CMPB	SNDCNT		;FINISH TONE?
	BNE	SC3
	DEC	X,0
	LDAA	I,0FF		;NO SOUND ACTIVE
	STAA	SNDNAM
	BRA	SCINC2
SC3:	LDX	SCAD3
	LDAA	X,0		;GET FREQ+AMP ADDR
	JSR	INDEX
	LDAA	SNDCNT		;ADD IN COUNT
	JSR	INDEX
	LDAA	X,0
	STAA	E,FREQAMP	;FREQUENCY
	LDAA	SNDCNT		;FIRST TIME?
	BEQ	40$		;YES
	INC	E,SNDCNT
	RTS			;ELSE DONE
40$:	LDX	SCAD3		;YES
	LDAA	X,1
	STAA	E,WAVEN		;RANGE, ENABLE
;
;UPDATE SCORES, TEST FOR REPLAYS
;
	BSR	ADDSCR		;ADD TO SCORE
	LDX	D,SCAD1		;PLAYER SCORE POINTER+2
;
;ROUTINE TO UNBLANK INTERVENING DIGITS
;
	LDAB	I,6		;B IS A FLAG
	LDAA	I,3		;6 DIGITS TO CHECK
	BSR	INDEX		;OFFSET X TO MILLIONS DIGIT
UNBLNK:
50$:	LDAA	X,0		;GET SCORE DIGIT
	ANDA	I,0F
	TSTB
	BPL	60$		;HAVEN'T STARTED UNBLANKING YET
	CMPA	I,9.		;IS THIS DIGIT BCD?
	BLE	70$		;YES, DON'T UNBLANK
	CLR	X,0		;UNBLANK DIGIT
	BRA	70$
60$:	CMPA	I,9.		;IS THIS DIGIT UNBLANKED
	BGT	70$		;NO CONTINUE SEARCH
	NEGB
70$:	DEX			;MOVE TO LOWER DIGIT
	TSTB
	BPL	80$		;ITS POSITION
	INCB			;DECR COUNTER
	BRA	85$
80$:	DECB			;DECR COUNTER
85$:	BNE	50$
CEXIT:	RTS			;DONE WITH SOUND/SCORE ROUTINE
;
;ADD SCORE FROM THE SOUND DESCRIPTORS
;
ADDSCR:
	LDAB	X,5		;B=BYTE OF SCORE
	BSR	SCRTST
	BSR	CADDR		;POINT AT PLAYER SCORE
	INX			;IGNORE ONE DIGIT
	LDAA	D,OLDSCR	;TEST IT REPLAYERS CHECK
	ORAA	D,OLDSCR+1
	BNE	20$		;BRANCH IF DONT UPDATE
	BSR	GETMTR		;GET OLD SCORE INTO OLDSCR
	DEX
	DEX
	DEX
	DEX
	DEX			;BACK UP X
	DEX
20$:	LDAA	I,6		;6 DIGIT ADD ALL CARRY
	BSR	SCORE2		;ADD IT TO THE SCORE
	LDX	D,SCAD3		;GET SOUND DESCRIPTOR POINTER
	LDAB	X,4		;GET 1000'S AN 10000'S
	BSR	SCRTST		;TEST SCORE PLAY AN SET IT
	LDAA	I,4		;4 DIGIT ADD AND CARRY
	INC	SNDCNT		;INCR COUNTER
	LDX	D,SCAD1		;GET PLAYER SCORE POINTER SET IN SCORE2
	INX			;SKIP 10'S
	INX			;SKIP 100'S
;
;FALL INTO SCORE2 ROUTINE
;
;X=SCORE POINTER
;A=NUMBER OF DIGITS TO CARRY INTO
;B=BYTE OF SCORE TO ADD IN
SCORE2:	STX	D,SCAD1		;SAVE SCORE POINTER
	PSHB			;SAVE SCORE BYTE
	PSHA			;SAVE DIGIT COUNT
	ANDB	I,0F		;GET LOW DIGIT SCORE
	BEQ	30$		;NO LOW DIGIT
	JSR	SCRE
30$:	PULA			;GET DIGIT COUNT
	DECA			;ONE SHORTER
	PULB
	LSRB
	LSRB			;GET HIGH DIGIT
	LSRB
	LSRB
	BEQ	CEXIT		;NO MORE SCORE
	LDX	D,SCAD1
	INX			;SCORE POINTER
	JMP	SCRE		;AND RETURN
;
;IF B NOT 0 AND SCORED FLAG IS NOT ON SET IT
;
SCRTST:	TSTB
	BEQ	CEXIT		;NO SCORE NOW
	LDAA	I,8		;SECOND ALRADY?
	BITA	D,STATFLG
	BNE	CEXIT		;YES ALREADY SET
	JMP	ORSTAT		;SET SCORED FLAG
;*CALCULATE PLAYER SCORE ADDR
;*X-LSD ADDR, ACCA, B SAVED
CADDR:				;SAVE
	LDAA	PLAYN		;MULT X 7
	ASLA
	ASLA
	ASLA
	SUBA	D,PLAYN
	LDX	I,DISP
;
;FALL INTO INDEX AND RETURN
;
;*INDEX ROUTINE
INDEX:  SEI
	NOP
	STX	 TEMPI	;ADDS 8-BIT VALUE IN ACCA TO I
	ADDA	 TEMPI+1
	STAA	 TEMPI+1
	BCC	 20$
	INC	 TEMPI
20$:	LDX	 TEMPI
	CLI
	RTS
	.PAGE
	.SBTTL	REPLAY CHECKS
GETSCR: BSR	CADDR		;X=PLAYER SCORE
	INX			;IGNORE ONES DIGITS
GETMTR:	BSR	GBYTE2
	STAA	D,OLDSCR+2	;SAVE IN LSD
	BSR	GBYTE2
	STAA	D,OLDSCR+1	;SAVE IN MIDDLE DIGITS
	BSR	GBYTE2
	STAA	D,OLDSCR	;LAST 2 DIGITS
	RTS
REPLAY:	LDAA	D,OLDSCR
	ORAA	D,OLDSCR+1
	BEQ	REXIT
	LDX	I,BTMP
	BSR	SAVMTR		;MOVE OLDSCR TO BTMP
	LDX	I,REP1		;STARTING PTR
10$:	LDAA	X,3		;TEST THOUSANDS DIGIT
	ANDA	I,0F		;LOW 4 BITS
	SUBA	I,0F		;ZERO IF BLANK
	PSHA			;LATER
	INX
	STX	D,REPTM1	;SAVE INDEX
	LDX	I,BTMP		;GET SAVED OLDSCR
	BSR	GETMTR
	LDX	D,REPTM1	;RESTORE X
	JSR	COMP		;CHECK OLD SCORE
	TPA
	PULB			;GET ORIGN THOUSANDS
	BLS	30$		;REPLAY LE OLD SCORE
	TSTB			;IF BLANK IGNORE
	BEQ	30$		;SO IGNORE
	BSR	GETSCR		;BLITSES OLDSCR WITH THE CURRENT SCORE
	LDX	D,REPTM1	;GET REPLAY PTR
	JSR	COMP		;TEST NEW SCORE
	TPA			;GET STATUS
	BLS	HREP		;GIVE A REPLAY
30$:	CPX	I,REP3+7	;DONE?
	BNE	40$		;NO, TRY AGAIN
	LDX	I,HISCORE
40$:	CPX	I,HISCORE+7	;REALLY DONE?
	BNE	10$		;KEEP TRYING
;
; MAINTAIN HIGH SCORE TO DATE
;
	TAP			;GET SAVED CONDITION CODE
	BHI	NREP		;NOT A NEW H.S.T.D.
	TSTB			;TEST THOUSAND DIGITS
	BEQ	NREP		;NO REPLY LEVEL
	BSR	GETSCR
;
; OPTIONALLY DONT LET H.S.T.D. OVER A MILLION
;
	ROL	E,OPTBK3	;TEST SWITCH 6
	BMI	60$		;NO LIMIT ON HSTD
	LDAA	D,OLDSCR	;GET MOST SIG. DIGIT OF SCORE
	BITA	I,0F0		;TEST IF BLANKED IMPROVED BCD CODE
	BNE	NREP		;SCORE IS GT 1000000 DONT UPDATE HSTD
60$:
	LDX	I,HISCORE+1
	BSR	SAVMTR		;SAVE THE NEW HSTD
	JSR	HICHSM		;GET A NEW HSTD CHECKSUM
	STAA	X,R4CHSM	;SAVE NEW CHECKSUM
;
;NO REPLAYS THIS TIME
;
NREP:	CLRA
	STAA	D,OLDSCR+1	;CLEAR OLD SCORE FLAG
	STAA	D,OLDSCR
REXIT:	RTS
SAVMTR:	LDAA	D,OLDSCR+2
	BSR	SBYTE2		;SAVE NEW SCORE LOW DIGITS
	LDAA	D,OLDSCR+1
	BSR	SBYTE2		;SAVE MIDDLE DIGITS
	LDAA	D,OLDSCR
	BRA	SBYTE2		;AND RETURN
;
;GET A BYTE WITH NO F DIGITS
;
GBYTE2:	BSR	GBYTE
	ADDA	I,11		;RANGE IS 0 TO A
	BITA	I,0F		;HALF CARRY?
	BNE	GBYTE3
	SUBA	I,10		;REMOVE THE CARRY
	BRA	GBYTE3
;*
;*REPLAY HANDLER
;*
HREP:	LDAA	E,OPTBK1	;ADD-A-BALL OR REPLAY
	BITA	I,10
	BEQ	ADCRED		;REPLAY
	LDAA	I,4		;TURN ON XBALL FLAG
	JSR	ORSTAT
	LDAA	I,RPMTR-BATTERY	;HIT REPLAY METER
	JSR	MINC		;INC METER RETURN
	BRA	NREP		;EXIT
;
;*ADD CREDIT FOR REPLAY
;
ADCRED:	LDAA	E,REPSND		;SOUND NUMBER
	ADDA	D,RPSND			;REQUEST THE SOUND N TIMES
	STAA	D,RPSND
20$:	CPX	I,HISCORE+7		;NEW HSTD?
	BNE	ADCRD1			;NO
	LDAA	E,OPTBK4
	BPL	30$			;2 REPLAYS
	ASLA			;TEST IF 1 OR 3 REPLAYS
	BMI	ADCRD1		;ONLY 1 REPLAY
	BSR	ADCRD1			;3 REPLAYS
30$:	BSR	ADCRD1			;2 REPLAYS
;*ENTRY POINT FOR NON-SCORE REPLAY
ADCRD1:	LDAA	I,RPMTR-BATTERY
	JSR	MINC
	LDAA	I,1
;*
;*CREDIT HANDLER
;*
CLIT:
CLITE:	SEI
	TAB			;MAKE CREDIT SOUNDS
	ADDB	CRDSND
	STAB	CRDSND
CLIT2:	ADDA	CRED
	DAA
	LDAB	D,SOLC3		;LOCKOUT SOLENOID CONTROL
	ORAB	I,2
	CMPA	MAXCRD
	BLT	CLIT1
	ANDB	I,0FD
	LDAA	MAXCRD
CLIT1:	STAA	CRED
	STAB	D,SOLC3		;CONTROL THE LOCKOUT
	CLI
	LDX	I,CREDIT		;BATTERY BACK-UP
;*STORE BYTE AT X, X+1
SBYTE:	STAA	X,0
	LSRA
	LSRA
	LSRA
	LSRA
	STAA	X,1
	RTS
;
; STORE BYTE LOADED BY GBYTE2
;
SBYTE2:	BITA	I,0F		;TEST IF IT WILL BORROW
	BNE	10$		;NO
	ADDA	I,10		;PREPARE FOR A BORROW
10$:	SUBA	I,11		;0 TO 1 GOES TO F TO 9
;*STORE BYTE + INX, INX
SBYTE1:	BSR	SBYTE
	BRA	GBYTE3		;INX,INX,RTS
;*GET BYTE
GBYTE:	PSHB
	LDAB	X,0
	ANDB	I,0F
	LDAA	X,1
	ASLA
	ASLA
	ASLA
	ASLA
	ABA
	PULB
	RTS
;*GET BYTE + INX,INX
GBYTE1:	BSR	GBYTE
GBYTE3:	INX
	INX
	RTS
;
;COMPARE 3 BASE PAGE BYTES WITH BATTERY POINTED TO BY X
;X-BATTERY
;
COMP:	JSR	GBYTE2		;GET LOW 2 DIGITS
	PSHA			;SAVE IT
	JSR	GBYTE2
	TAB			;B=MIDDLE 2 DIGITS
	JSR	GBYTE2		;A=HIGH 2 DIGITS
	CMPA	D,OLDSCR	;CHECK MSB
	BHI	CX1
	BNE	CX1
	CMPB	D,OLDSCR+1	;CHECK MIDDLE
	BHI	CX1
	BNE	CX1
	PULA
	CMPA	D,OLDSCR+2	;CHECK LSB
	RTS
CX1:	INS			;POP STACK
CX2:	RTS
	.PAGE
;
; VALIDATE REPLAY LEVELS
;
VREPS:	LDX	I,REP1
	BSR	RPCHSM		;CALCULATE MTER CHSM
	EORB	X,R1CHSM	;CHECK CHECKSUM
	STAA	X,R1CHSM
	BSR	TCHK
	BSR	RPCHSM
	EORB	X,R2CHSM	;CHECK OLD
	STAA	X,R2CHSM	;SET NEW
	BSR	TCHK
	BSR	RPCHSM
	EORB	X,R3CHSM	;CHECK OLD
	STAA	X,R3CHSM	;SAVE NEW
	BSR	TCHK
	BSR	HICHSM			;DO H.S.T.D. CHECKSUM
	EORB	X,R4CHSM	;CHECK OLD
	STAA	X,R4CHSM	;SAVE NEW
;
;TEST CHECKSUM
;
TCHK:	ANDB	I,0F
	BEQ	CX2		;NO ERROR
	LDAB	D,TSTFLG	;CHECK IF IN SELF TEST
	BMI	CX2
;
;	COUNT BATTERY FAILURES
;
	STX	D,REPTM1
	LDAA	I,BEMTR-BATTERY
	JSR	MINC
	LDX	D,REPTM1
;
;	RESET REPLAY LEVEL TO DISABLE IT
;
RESREP:	LDAA	I,0F		;BLANK CODE
	LDAB	I,7
	STX	D,REPTM1	;SAVE X
20$:	DEX
	STAA	X,0		;ZERO BAD REPLAY LEVEL
	CMPB	I,4		;ZERO HUNDS, TENS, ONES-BLANK THE REST
	BNE	25$
	CLRA			;WILL NOW ZERO
25$:
	DECB
	BNE	20$
	LDX	D,REPTM1	;RESTORE X
30$:	RTS
;
;MAKE A BATTERY CHECKSUM X=MEM B=LENGTH
;
HICHSM:	LDX	I,HISCORE	;ENTRY FOR HSTD CHECKSUM
RPCHSM:	LDAB	I,7		;REPLAY HSTD LENGTH
DOCHSM:	CLRA			;PRESERVE LENGTH
10$:	EORA	X,0		;PSEUDO-CHSM
	INX
	DECB
	BNE	10$
	ANDA	I,0F
	TAB
	RTS
;
;ROUTINE TO OR A WITH STATFLG
;
ORSTAT:	SEI			;INTS OFF
	NOP
	ORAA	D,STATFLG
	STAA	D,STATFLG
;
;FALL INTO SWSWON ROUTINE
;
;
;REQUEST SOFTWARE SWITCH WHEN A FLAG IS SET
;
	LDAA	I,40		;BIT 6 IN WORD 7
	ORAA	D,T107
	STAA	D,T107		;CAUSE A SWITCH CLOSURE
	CLI
	RTS
;*BLANK WHOLE DISPLAY
DISBLK:	LDAA	I,0FF
DISSET:	LDX	I,DISP+34.
DISPLP:	STAA	X,0
	DEX
	CPX	I,DISP-1
	BNE	DISPLP
	RTS
	.PAGE
	.SBTTL	PWRON
;*
;* BEGIN OP SYS 1.0
;*
;*POWER ON
PWRON:	LDS	I,0FF
	TSX
1$:	CLR	X,0		;CLEAR ALL BUT LOCATION ZERO
	DEX
	BNE	1$
	STS	SNDCNT		;COUNT=0, NAME=FF
	LDAA	I,0AA
	STAA	D,RAMTS1	;SET RAM TEST VALUES
	LSRA
	STAA	D,RAMTS2
	CLR	E,SOLAD		;SOLENOIDS OFF
	CLR	E,WAVEN		;NO SOUND
	LDAA	E,SWITCH	;SELF TEST?
	COMA			;CHANGE TO POSITIVE TRUE
	BITA	I,81		;TEST BOTH SELF-TEST INPUTS
	BNE	RAMTST
40$:
	LDAA	I,40		;INIT STATUS
	BSR	ORSTAT		;AND START SYSTEM - ENABLES INTERRUPTS
	JMP	START		;JUMP TO INTERPRETER
	.PAGE
;
;	PERFORM RAM TEST
;
;		FIRST SET ALL OF IT TO FF
;
RAMTST:	LDX	I,700		;BASE PAGE IS ALSO AT 700-7FF
	LDAA	I,0FF
10$:	STAA	X,0		;SET TO FF
	INX
	CPX	I,800		;AT BATTERY YET?
	BNE	20$		;NOPE
	LDX	I,ENDMTR	;SKIP THE METERS
20$:	CPX	I,HISCORE	;DONE?
	BNE	10$		;NOPE
;
;	NOW TEST THE RAM
;
	LDAA	I,41		;SET RAM FLAG BITS
30$:	ASLA			;SHIFT ERROR FLAGS
40$:	DEX			;TEST HISCORE TO BCHSM AND FF TO 0
	LDAB	X,0		;READ THE RAM
	COMB			;TEST IT, IT SHOULD BE FF
	BEQ	45$		;ITS OK
;POSSIBLE ERROR
	TSTA			;ARE WE IN 4 BIT WIDE BATTERY RAM
	BPL	50$		;NO, SO IT IS AN ERROR
	ANDB	I,0F		;TEST JUST LOW 4 BITS
	BNE	50$		;STILL ITS AN ERROR
45$:	STAB	X,0		;LEAVE RAM ZERO AFTER TESTING
	LDAB	X,0		;TEST IF IT REALLY GOT ZEROED.
	BEQ	75$		;ITS OK
	TSTA			;BATTERY?
	BPL	50$		;ERROR IN BASE PAGE RAM
	ANDB	I,0F		;TEST LOW 4 BITS
	BEQ	75$		;ITS OK
				;NO, A BATTERY ERROR
;
;RAM ERROR HAS BEEN DETECTED
;
50$:	INCA			;SET BAD RAM FLAG
	TSTA			;BATTERY?
	BMI	80$		;YES, QUIT TESTING
	ASLA			;NO ZPAGE ERROR
	BITB	I,0F0		;TEST HIGH 4 BITS
	BEQ	60$		;THEY ARE OK
	INCA			;NOTE THE ERROR
60$:	ASLA			;SHIFT FLAGS AGAIN
	BITB	I,0F		;TEST LOW 4 BITS
	BEQ	70$		;NOT BAD
	INCA
70$:	BRA	ROMTST		;QUIT TESTING ON BASE PAGE ERROR
75$:	STX	E,WRES		;TEST X
	BEQ	RAMOK
78$:	CPX	I,ENDMTR	;BATTERY DONE?
	BNE	40$		;NO KEEP TESTING
80$:	LDX	I,0FF		;TEST BASE PAGE NOW
	BRA	30$
RAMOK:  ASLA
	ASLA			;FLAG AS GOOD
;
;ROM CHECKSUM TEST
;
ROMTST:			;FLAG BYTE IS IN B
	LDX	I,ROM0+1800	;3 ROMS TO TEST
10$:	LDAB	I,0AA		;NON-ZERO SEED
	LDS	I,2048.		;LOOP COUNT IN SP
20$:	DEX			;PRE DECR (IF YOU SAY SO)
	ADDB	X,0		;SUM THE ROM
	DES			;DOESN'T SET CONDITION CODES
	STS	E,WRES		;STORE DOES
	BNE	20$
	ASLA			;SHIFT ERROR MASK
	STAB	D,CHSM		;CHECK CHECKSUM
	BEQ	30$		;ITS OK
	INCA			;SET ERROR BIT
30$:	TSTA			;DONE?
	BPL	10$		;NO DO NEXT ROM
;
;DISPLAY RAM AND ROM ERRORS
;
ENDRR:	BITA	I,77		;ERRORS?
	BEQ	ENDERR		;NONE
	CLR	E,FREQAMP	;SOUNDS OFF
5$:	STAA	E,LED		;SHOW RAM ERROR
	LDS	I,8000		;LOOP COUNTER
10$:	DES
	STS	E,WRES		;SET CONDITION CODES
	BNE	10$
;SWAP NIBBLES
	TAB
	ANDA	I,0F0
	ABA			;MAKE A HOLE IN A
	ROLA
	ROLA
	ROLA
	ROLA
	LDAB	E,SWITCH	;GET SWITCHES
	COMB
	BITB	I,81		;TEST ON? AND START ON?
	BEQ	5$
	BITB	I,4		;BOTH START AND TEST MUST BE ON
	BEQ	5$
ENDERR:	JMP	TEST		;GO TO REGULAR SELF TEST NOW
;*
;*VECTORS
;*
	.REPT	1
	.BYTE	0
	.ENDR
	.BYTE	0		;LAST 2K CHECKSUM BYTE
	.WORD	IRQ,PWRON,PWRON,PWRON
	.END
                                                                                                                                                                                                                                          